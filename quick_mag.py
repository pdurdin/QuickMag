# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuickMag
								 A QGIS plugin
 Parses ASC file and generates raster
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							  -------------------
		begin				 : 2025-06-28
		git sha				 : $Format:%H$
		copyright			 : (C) 2025 by P Durdin
		email				 : pdurdin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *																		   *
 *	 This program is free software; you can redistribute it and/or modify  *
 *	 it under the terms of the GNU General Public License as published by  *
 *	 the Free Software Foundation; either version 2 of the License, or	   *
 *	 (at your option) any later version.								   *
 *																		   *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

from qgis.core import QgsMessageLog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .quick_mag_dialog import QuickMagDialog
import os.path


from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsGeometry, QgsPointXY
from qgis.core import QgsProject, QgsVectorLayer, QgsField, QgsFeature, QgsRasterLayer, QgsSingleBandGrayRenderer, QgsContrastEnhancement, QgsVectorFileWriter, QgsProcessingUtils
from qgis.PyQt.QtCore import QVariant, QMetaType

from math import sqrt
from datetime import datetime
import time
import csv
from itertools import groupby
import statistics
import processing

from numpy.polynomial import Polynomial

class QuickMag():
	"""QGIS Plugin Implementation."""

	def __init__(self, iface):
		"""Constructor.

		:param iface: An interface instance that will be passed to this class
			which provides the hook by which you can manipulate the QGIS
			application at run time.
		:type iface: QgsInterface
		"""
		# Save reference to the QGIS interface
		self.iface = iface
		# initialize plugin directory
		self.plugin_dir = os.path.dirname(__file__)
		# initialize locale
		locale = QSettings().value('locale/userLocale')[0:2]
		locale_path = os.path.join(
			self.plugin_dir,
			'i18n',
			'QuickMag_{}.qm'.format(locale))

		if os.path.exists(locale_path):
			self.translator = QTranslator()
			self.translator.load(locale_path)
			QCoreApplication.installTranslator(self.translator)

		# Declare instance attributes
		self.actions = []
		self.menu = self.tr(u'&QuickMag')

		# Check if plugin was started the first time in current QGIS session
		# Must be set in initGui() to survive plugin reloads
		self.first_start = None
		
		# create variables
		self.layername = None
		self.data = None
		self.filepath = None
		self.trendRemoval = False		# do not attempt trend removal by default
		self.defaultDisplayRange = 3.0	# default layer symbology min/max
		self.pointSpacing = 0.125		# default minimum point spacing in metres

	# noinspection PyMethodMayBeStatic
	def tr(self, message):
		"""Get the translation for a string using Qt translation API.

		We implement this ourselves since we do not inherit QObject.

		:param message: String for translation.
		:type message: str, QString

		:returns: Translated version of message.
		:rtype: QString
		"""
		# noinspection PyTypeChecker,PyArgumentList,PyCallByClass
		return QCoreApplication.translate('QuickMag', message)


	def add_action(
		self,
		icon_path,
		text,
		callback,
		enabled_flag=True,
		add_to_menu=True,
		add_to_toolbar=True,
		status_tip=None,
		whats_this=None,
		parent=None):
		"""Add a toolbar icon to the toolbar.

		:param icon_path: Path to the icon for this action. Can be a resource
			path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
		:type icon_path: str

		:param text: Text that should be shown in menu items for this action.
		:type text: str

		:param callback: Function to be called when the action is triggered.
		:type callback: function

		:param enabled_flag: A flag indicating if the action should be enabled
			by default. Defaults to True.
		:type enabled_flag: bool

		:param add_to_menu: Flag indicating whether the action should also
			be added to the menu. Defaults to True.
		:type add_to_menu: bool

		:param add_to_toolbar: Flag indicating whether the action should also
			be added to the toolbar. Defaults to True.
		:type add_to_toolbar: bool

		:param status_tip: Optional text to show in a popup when mouse pointer
			hovers over the action.
		:type status_tip: str

		:param parent: Parent widget for the new action. Defaults None.
		:type parent: QWidget

		:param whats_this: Optional text to show in the status bar when the
			mouse pointer hovers over the action.

		:returns: The action that was created. Note that the action is also
			added to self.actions list.
		:rtype: QAction
		"""

		icon = QIcon(icon_path)
		action = QAction(icon, text, parent)
		action.triggered.connect(callback)
		action.setEnabled(enabled_flag)

		if status_tip is not None:
			action.setStatusTip(status_tip)

		if whats_this is not None:
			action.setWhatsThis(whats_this)

		if add_to_toolbar:
			# Adds plugin icon to Plugins toolbar
			self.iface.addToolBarIcon(action)

		if add_to_menu:
			self.iface.addPluginToMenu(
				self.menu,
				action)

		self.actions.append(action)

		return action

	def initGui(self):
		"""Create the menu entries and toolbar icons inside the QGIS GUI."""

		icon_path = ':/plugins/quick_mag/icon.png'
		self.add_action(
			icon_path,
			text=self.tr(u'Process ASC file...'),
			callback=self.run,
			parent=self.iface.mainWindow())

		# will be set False in run()
		self.first_start = True


	def unload(self):
		"""Removes the plugin menu item and icon from QGIS GUI."""
		for action in self.actions:
			self.iface.removePluginMenu(
				self.tr(u'&QuickMag'),
				action)
			self.iface.removeToolBarIcon(action)


	def run(self):
		"""Run method that performs all the real work"""

		# Create the dialog with elements (after translation) and keep reference
		# Only create GUI ONCE in callback, so that it will only load when the plugin is started
		if self.first_start == True:
			self.first_start = False
			self.dlg = QuickMagDialog()
			self.dlg.quickMagRun.clicked.connect(self.processASC)

		# show the dialog
		self.dlg.show()
		
		# Run the dialog event loop
		result = self.dlg.exec_()
		
		# See if OK was pressed
		if result:
			# Do something useful here - delete the line containing pass and
			# substitute with your code.
			pass
	
	
	def processASC(self):
		self.filepath = self.dlg.quickMagFileInput.filePath()
		if not self.filepath:
			QMessageBox.warning(None, "Quick Mag Error", "Please select an ASC file to process")
			return False
	
		start = time.time()
		
		# process ASC file into vector points
		self.loadASC()
		# interpolate raster
		newRaster = self.genRaster()
		
		if self.dlg.quickMagTrendRemoval.isChecked():
			self.trendRemoval = True
		
		# update layer symbology to use -3/+3 min max
		self.updateRasterDisplay( newRaster, -self.defaultDisplayRange, self.defaultDisplayRange )
		
		# run high pass filter if required (default on)
		if self.dlg.quickMagHighPass.isChecked():		
			highPassRaster = self.runHighPassFilter( newRaster )
			self.updateRasterDisplay( highPassRaster, -self.defaultDisplayRange, self.defaultDisplayRange )
		
		end = time.time()
		print(f"TOTAL DURATION: {end - start:0.2f}s")
		self.dlg.quickMagProgress.setText(f"ASC processed and raster generated in: {end - start:0.2f}s")
		
	
	# load ASC file, perform median/trend calculations and generate vector points layer with modified values
	def loadASC(self):
		start = time.time()
		print("Loading ASC...")
		with open( self.filepath ) as csvfile:
			self.data = list(csv.reader(csvfile, delimiter = "\t"))
		end = time.time()
		print(f"Duration: {end - start:0.2f}s")
		
		# perform median/trend calculations grouped by trace and probe
		start = time.time()
		print("Calculating line medians...")
		probeMedians = {}
		# line[3] and line[4] are trace and probe
		for key, group in groupby( sorted( self.data, key=lambda line: (line[3], line[4]) ), lambda line: (line[3], line[4])):
			# can't refer to key[0] directly, need to cast to a list first
			keys = list(key)
			
			# if median values for this trace don't exist yet, create empty container
			if probeMedians.get(keys[0]) is None:
				probeMedians[keys[0]] = {}
			
			# retrieve values for each line
			lineValues = list(map(float, list(zip(*group))[2] ) )
			# get median value for each line
			probeMedians[keys[0]][keys[1]] = statistics.median( lineValues )
			
			if self.trendRemoval:
				"""
				for trend removal we need to do a polynomial.fit, plotting position along the line
					against raw value, and then subtract the ...coefficient??
				can we do this here in the group by or do we need to do it against each point individually?
				"""
				# linePosition = sqrt( (x - firstX)**2 + (y - firstY)**2 )
				# Polynomial.fit( linePosition, lineValues, deg=3 )
				# trendValue = ???
				pass
				
		end = time.time()
		print(f"Duration: {end - start:0.2f}s")
		
		# generate vector point layer
		start = time.time()
		print("Creating point layer...")
		# get project CRS
		crsProj = QgsCoordinateReferenceSystem(QgsProject.instance().crs().authid())
		
		# split out input ASC filename and combine with date time for layer name
		filename = os.path.basename( self.filepath )
		self.layername = filename + "-" + datetime.now().strftime('%Y-%m-%d %H%M')
		
		# create temporary layer( type, name, storage type )
		vlayer = QgsVectorLayer("Point", self.layername, "memory")
		vlayer.setCrs(crsProj)
		pr = vlayer.dataProvider()
		
		# create attribute fields in the layer
		pr.addAttributes([QgsField("x", QMetaType.Type.Double),
						  QgsField("y", QMetaType.Type.Double),
						  QgsField("rawValue", QMetaType.Type.Double),
						  QgsField("modifiedValue", QMetaType.Type.Double),
						  QgsField("trendValue", QMetaType.Type.Double),
						  QgsField("trace", QMetaType.Type.QString),
						  QgsField("probe", QMetaType.Type.Int)])
		vlayer.updateFields()
		end = time.time()
		print(f"Duration: {end - start:0.2f}s")
		
		# Sensys ASC files use UTM CRS with the UTM code as the first part of the x value
		utmVal = 0
		
		# hack_line_limit = 100
		# hack_line_count = 0
		lastX = {}
		lastY = {}
		"""
		firstX = {}
		firstY = {}			# 
		linePosition = 0	# distance of point along line
		lastTrace = None
		lastProbe = None
		"""
		
		start = time.time()
		print("Generating vector points...")
		# loop through data and create point for each row with modifiedValue
		# modifiedValue = value - probeMedians[trace, probe]
		# trendValue needs more complex calculations involving position along line
		for reading in self.data:
			# data structure:
			#	['30568506.443', '5659862.034', '-0.5', 'L1_20250122-120324_GZ.prm', '1']
			
			# get UTM value from initial digits of X coordinate on first line
			if utmVal == 0:
				utmVal = int(float(reading[0]) / 1000000)		# UTM value could be 1 or 2 digits
				utmCode = int(32600 + utmVal)					# codes for UTM CRS are 326xx
				
				# set up transform from UTM to project CRS
				crsASC = QgsCoordinateReferenceSystem(f"EPSG:{utmCode}")
				crsTransform = QgsCoordinateTransform(crsASC, crsProj, QgsProject.instance())
				
				# crs = vlayer.crs()
				# crs.createFromId(utmCode) # UTM id is 326xx
				
			# get x/y coordinates as floats with UTMval removed
			x = float(reading[0]) - (utmVal * 1000000)
			y = float(reading[1])
			
			probeNo = "probe" + reading[4]
			if probeNo in lastX and probeNo in lastY:
				# skip over points closer together than self.pointSpacing (in metres) along one line.
				# This reduces processing time considerably, and mainly accounts for the machine being
				# pushed with speed settings intended for towing at higher speed!
				distance = sqrt( (x - lastX[probeNo])**2 + (y - lastY[probeNo])**2 )
				if distance < self.pointSpacing:
					continue
			
			# last stored point position
			lastX[probeNo] = x
			lastY[probeNo] = y
			
			"""
			# if this is the first point on the line, store as firstX/Y for trend removal purposes
			if reading[3] != lastTrace or reading[4] != lastProbe:
				firstX[probeNo] = x
				firstY[probeNo] = y
				lastTrace = reading[3]
				lastProbe = reading[4]
			"""
			
			# actual readings and processed values
			rawValue = float(reading[2])
			modifiedValue = rawValue - probeMedians[reading[3]][reading[4]]
			
			# this needs to be calculated!
			trendValue = 0.0
			
			# create vector point
			f = QgsFeature()
			qPoint = QgsPointXY(x, y)
			xPoint = crsTransform.transform(qPoint) # coordinate Transform from UTM to project CRS
			f.setGeometry( QgsGeometry.fromPointXY(xPoint) )
			
			# f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY( x, y )))
			f.setAttributes([x, y, rawValue, modifiedValue, trendValue, reading[3], reading[4]])
			pr.addFeature(f)
			
			# hack_line_count += 1
			# if hack_line_count >= hack_line_limit:
			#	break
		end = time.time()
		print(f"Duration: {end - start:0.2f}s")
		
		start = time.time()
		print("Saving layer...")
		# update layer extent and add it to the map
		vlayer.updateExtents() 
		QgsProject.instance().addMapLayer(vlayer)
		
		# do not show the points layer by default
		node = QgsProject.instance().layerTreeRoot().findLayer(vlayer)
		if node:
			node.setItemVisibilityChecked(False)
		
		# below code is needed to use SAGA multi b-spline algorithm as it doesn't work on a memory layer
		"""
		options = QgsVectorFileWriter.SaveVectorOptions()
		options.driverName = "ESRI Shapefile"
		QgsVectorFileWriter.writeAsVectorFormatV3(
			vlayer,
			r"D:/sensys/test.shp",
			QgsProject.instance().transformContext(),
			options
			)
		"""
		end = time.time()
		print(f"Duration: {end - start:0.2f}s")
	
	# function to interpolate raster from vector points layer
	def genRaster(self, field = 'modifiedValue'):
		start = time.time()
		print("Generating raster")
		
		# theoretically we can use the currently selected layer
		if self.layername is None:
			return False
			vlayer = self.iface.layerTreeView().currentLayer() # grabs currently selected layer
		else:
			vlayer = QgsProject.instance().mapLayersByName(self.layername)[0]
		
		# get points layer extent to allow raster resolution calculation
		ext = vlayer.extent()
		xmin = ext.xMinimum()
		xmax = ext.xMaximum()
		ymin = ext.yMinimum()
		ymax = ext.yMaximum()
		
		# set raster extent and cell size at 0.125 x 0.125m
		extraOpt = "-tr 0.125 0.125 -txe " + str(xmin) + " " + str(xmax) + " -tye " + str(ymin) + " " + str(ymax)
		
		# use IDW interpolation for quick raster generation
		alg = "gdal:gridinversedistancenearestneighbor"
		params = {'INPUT':vlayer,
			'Z_FIELD':field,
			'POWER':2,
			'SMOOTHING':0.1,
			'RADIUS':1.5,
			'MAX_POINTS':30,
			'MIN_POINTS':0,
			'NODATA':9999,
			'OPTIONS':None,
			'EXTRA':extraOpt,
			'DATA_TYPE':5,
			'OUTPUT':'TEMPORARY_OUTPUT'}
		
		results = processing.run( alg, params )
		
		rasterLayer = QgsRasterLayer(results['OUTPUT'], "raster-" + self.layername)
		QgsProject.instance().addMapLayer(rasterLayer)			
		
		end = time.time()
		print(f"Duration: {end - start:0.2f}s")
		
		# saga multi b-spline is trickier, doesn't work on memory layer
		# would also need to be clipped to size using a heatmap raster generated from the same points
		# raster calculator expression: if( heatmap@1 != 9999, layer@1, 9999 )
		"""
		extent = str(xmin) + "," + str(xmax) + "," + str(ymin) + "," + str(ymax) + ""
		outputfile = os.path.dirname( self.filepath ) + "\\" + "temp.sdat"
		print(outputfile)
		
		alg = "sagang:multilevelbspline"
		params = {'SHAPES':r"D:/sensys/test.shp",
			'FIELD':'modifiedVa',
			'TARGET_USER_SIZE':0.2,
			'TARGET_USER_FITS':0,
			'TARGET_OUT_GRID':TEMPORARY_OUTPUT,
			'METHOD':0,
			'EPSILON':0.0001,
			'LEVEL_MAX':11}
		
		results = processing.run( alg, params )
		rasterLayer = QgsRasterLayer(results['TARGET_OUT_GRID'], "raster-" + self.layername)
		"""
		
		return rasterLayer
	
	# change raster display to fit in min/max values
	def updateRasterDisplay( self, layer = None, newMin = -3.0, newMax = 3.0 ):
		if not layer:
			layer = iface.layerTreeView().currentLayer()
		
		renderer = QgsSingleBandGrayRenderer(layer.dataProvider(), 1)
		ce = QgsContrastEnhancement(layer.dataProvider().dataType(0))
		ce.setContrastEnhancementAlgorithm(QgsContrastEnhancement.StretchToMinimumMaximum)
		ce.setMinimumValue(newMin)
		ce.setMaximumValue(newMax)
		renderer.setGradient(QgsSingleBandGrayRenderer.WhiteToBlack)
		renderer.setContrastEnhancement(ce)
		
		layer.setRenderer(renderer)
		layer.triggerRepaint()
		
		# collapse node on layers list
		node = QgsProject.instance().layerTreeRoot().findLayer(layer)
		if node:
			node.setExpanded(False)
	
	# use Whitebox Workflows high pass median filter
	def runHighPassFilter( self, layer = None ):
		if not layer:
			layer = iface.layerTreeView().currentLayer()
		
		alg = "wbw:high_pass_median_filter"
		params = {
			'inputRaster1':layer,
			'filter_size_x2':35,
			'filter_size_y3':35,
			'sig_digits4':1,
			'fnOutput':QgsProcessingUtils.generateTempFilename('highpass-output.tif')
			}

		results = processing.run( alg, params )
		# print(results)
		rasterLayer = QgsRasterLayer(results['fnOutput'], "highpass-" + self.layername)
		QgsProject.instance().addMapLayer(rasterLayer)
		
		return rasterLayer
		
		